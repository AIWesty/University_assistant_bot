from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, update, delete
from app.states.tasks import AddTask
from aiogram.fsm.context import FSMContext
from app.database import engine, tasks

from app.logger import get_logger
log = get_logger(__name__)#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ª–æ–≥–≥–µ—Ä –∏ –¥–∞–ª–∏ –µ–º—É –∏–º—è


#–æ–ø–∏—Å–∞–ª–∏ —Ä–æ—É—Ç–µ—Ä
router = Router() 

@router.message(Command('add_task'))
async def start_add_task_cmd(message: types.Message, state: FSMContext): 
    """–ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∑–∞—Ç–µ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    if message.from_user:
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏", message.from_user.id)
    await message.answer('–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –∑–∞–¥–∞—á—É. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:')
    await state.set_state(AddTask.title)

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
async def start_add_task_btn(message: types.Message, state: FSMContext):
    """—Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await start_add_task_cmd(message, state)

@router.message(AddTask.title)#–ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def save_task(message: types.Message, state: FSMContext): 
    """—Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    title = (message.text or '').strip() #–±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ 
    
    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ 
    if message.from_user is not None:
        tg_id = message.from_user.id
        
    if not title: #–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø—É—Å—Ç–∞—è
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç–æ–π. –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
        log.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç—É—é –∑–∞–¥–∞—á—É", tg_id)
        return
    
    try:
        async with engine.begin() as conn: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ 
            await conn.execute(# –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                tasks.insert().values(# –ø—Ä–æ–≤–æ–¥–∏–º –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    tg_id=tg_id,
                    title=title,
                    status='new'
                )
            )
        log.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: tg_id=%s title=%r", tg_id, title)
        await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–ù–∞–ø–∏—à–∏ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫.')
    except Exception: 
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É: tg_id=%s title=%r", tg_id, title)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    await state.clear() #–∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è

    
@router.message(Command("my_tasks"))
@router.message(F.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏")#–æ—Ç–∫–ª–∏—á–∫–∞–µ–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞ —Ç–µ–∫—Å—Ç
async def show_tasks(message: types.Message): 
    if message.from_user is not None:
        tg_id = message.from_user.id #–±—É–¥–µ–º –ª–æ–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ id, —á—Ç–æ–±—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ 
        
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", tg_id)
    async with engine.begin() as conn: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ 
        result = await conn.execute(#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            select(
                tasks.c.id, tasks.c.title, tasks.c.status, tasks.c.created_at#–≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            ).where(tasks.c.tg_id == tg_id).order_by(tasks.c.created_at.desc())#–≤—ã–±–∏—Ä–∞–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º
        )
        rows = result.mappings().all()#–¥–µ–ª–∞–µ–º –∏–∑ –∑–∞–¥–∞—á —Å–ª–æ–≤–∞—Ä–∏
        
        if not rows: 
            await message.answer('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É¬ª –∏ —Å–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é!"')
            return
        
        lines = []
        kb = InlineKeyboardBuilder() #—Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        for row in rows: #–ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –∑–∞–¥–∞—á–∞–º
            status_emoji = "üü¢" if row["status"] == "new" else "‚úÖ"#–≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
            lines.append(f"{status_emoji} {row['title']}")#–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å –∑–∞–¥–∞—á–∞–º–∏ —Å—Ç–∞—Ç—É—Å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            #–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞(—Å–æ–∑–¥–∞–Ω–∞) –¥–ª—è –Ω–µ–µ –Ω—É–∂–Ω—ã –∫–Ω–æ–ø–∫–∏
            if row['status'] == 'new': 
                kb.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"task_done:{row['id']}")#–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"task_del:{row['id']}")#–∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å, —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                kb.adjust(2)#–∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ 
                
        #–æ–±—å–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—Å—Ç
        text = "üìã *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:*\n\n" + "\n".join(lines)
        #–æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–∏–∫—Ä–µ–ø–ª—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 
        await message.answer(text, parse_mode='Markdown', reply_markup=kb.as_markup())
    
@router.callback_query(F.data.startswith("task_done:"))#—Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ callback —Å task_done:
async def task_done_db(callback: types.CallbackQuery): 
    try:
        if callback.data is not None:
            task_id = int(callback.data.split(":")[1])#–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∞–π–¥–∏ –∑–∞–¥–∞—á–∏
    except Exception:#–æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ 
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏.", show_alert=True)#–æ—Ç–≤–µ—Ç
        log.warning('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏')
        return
    if callback.from_user is not None: #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —é–∑–µ—Ä–∞
        tg_id = callback.from_user.id
    
    try:
        async with engine.begin() as conn: #–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            result = await conn.execute(
                update(tasks)#–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                .where(tasks.c.id == task_id, tasks.c.tg_id == tg_id, tasks.c.status == 'new')#—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–π–¥–∏ –∑–∞–¥–∞—á–∏, —á–µ–ª–æ–≤–µ–∫–∞, –∏ —Å—Ç–∞—Ç—É—Å–∞
                .values(
                    status='done'#–ø–æ–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 
                )
                .returning(
                    tasks.c.id#–≤–µ—Ä–Ω—É—Ç—å id –∑–∞–¥–∞—á–∏
                )
            )
        updated = result.scalar_one_or_none()#–ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –∏–ª–∏ None –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–∏–ª–∞—Å—å
        log.info("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è tg_id=%s task_id=%r", tg_id, task_id)
        if updated is None: #–µ—Å–ª–∏ none 
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç–≤–æ—è.", show_alert=True)
            log.warning("–ó–∞–¥–∞—á—É task_id=%r –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_id=%s –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å", tg_id, task_id)
        else: 
            await callback.answer("–ì–æ—Ç–æ–≤–æ! –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è ‚úÖ")
    except Exception:
        log.error("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ task_id=%r –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_id=%s", tg_id, task_id)

@router.callback_query(F.data.startswith('task_del'))
async def task_del_db(callback: types.CallbackQuery): 
    if callback.from_user is not None: #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —é–∑–µ—Ä–∞
        tg_id = callback.from_user.id
    
    try:
        if callback.data is not None:
            task_id = int(callback.data.split(":")[1])#–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∞–π–¥–∏ –∑–∞–¥–∞—á–∏
    except Exception:#–æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ 
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏.", show_alert=True)#–æ—Ç–≤–µ—Ç
        log.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏')
        return
    try:
        
        async with engine.begin() as conn: #—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ 
            result = await conn.execute(#–∏—Å–ø–æ–ª–Ω—è–µ–º
                delete(tasks)#—É–¥–∞–ª–µ–Ω–∏–µ 
                .where(tasks.c.id == task_id, tasks.c.tg_id == tg_id)#–≥–¥–µ –∞–π–¥–∏ –∑–∞–¥–∞—á–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º
                .returning(tasks.c.id)#–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–π–¥–∏ –∑–∞–¥–∞—á–∏
            )
        
        deleted = result.scalar_one_or_none()#–∞–π–¥–∏ –∏–ª–∏ none 
        if deleted is None: 
            log.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ —Ç–∞ –∑–∞–¥–∞—á–∞ task_id=%r tg_id=%s',  tg_id, task_id)
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞.", show_alert=True)
        else:
            log.error('–ó–∞–¥–∞—á–∞ task_id=%r –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_id=%s —É–¥–∞–ª–µ–Ω–∞',  tg_id, task_id)
            await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ üóë")
    except Exception: 
        log.error('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É task_id=%r –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_id=%s',  tg_id, task_id)