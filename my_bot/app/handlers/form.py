from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext #–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π 
from app.states.form import Form #–∫–ª–∞—Å—Å —Å –Ω–∞—à–µ–π —Ñ–æ—Ä–º–æ–π(—Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏)
from app.database import form, engine
from aiogram.types import ReplyKeyboardRemove
from app.keyboards.main_keyboard import main_menu
import re

#–∏–¥–µ–∏ - —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏ —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ
#–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from app.logger import get_logger
log = get_logger(__name__)

# --- helpers ---
PHONE_HINT = (
    "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
    "+79991234567 –∏–ª–∏ 89991234567"
)
EMAIL_HINT = "‚úâÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email (–Ω–∞–ø—Ä–∏–º–µ—Ä, name@example.com):"

EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")
# –î–æ–ø—É—Å—Ç–∏–º –ª—é–±—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª–∏–Ω–æ–π 10‚Äì15 —Ü–∏—Ñ—Ä, —Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º + –≤ –Ω–∞—á–∞–ª–µ
PHONE_RE = re.compile(r"^\+?\d{10,15}$")




router = Router() 

@router.message(Command('form'))#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º—ã
@router.message(F.text == 'üìã –ó–∞—è–≤–∫–∞')
async def cmd_form(message: types.Message, state: FSMContext): 
    if message.from_user:
        log.info("–ê–Ω–∫–µ—Ç–∞ –Ω–∞—á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", message.from_user.id)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.',
                        reply_markup=ReplyKeyboardRemove(placeholder=False))
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.\n(–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–∞–±–∏—Ä–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –≥–æ–¥—É —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ).')
    await state.set_state(Form.direction)#—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ direction

@router.message(F.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
async def button_start_form(message: types.Message, state: FSMContext):
    await cmd_form(message, state)#–≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã form 
    
    
@router.message(Form.direction)#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–∫–æ–º–∞–Ω–¥—É" direction
async def process_direction(message: types.Message, state: FSMContext): 
    if message.from_user:
        log.info("–ê–Ω–∫–µ—Ç–∞: %s –≤—ã–±—Ä–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ %s", message.from_user.id, message.text)
    await state.update_data(direction=message.text)#—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
    await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–µ—Ä–µ–π–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.')
    await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')#–æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º
    await state.set_state(Form.name)#—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 

    
@router.message(Form.name)#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–∫–æ–º–∞–Ω–¥—É"(–æ—Ç–≤–µ—Ç) name –∏–∑ —Ñ–æ—Ä–º—ã
async def process_name(message: types.Message, state: FSMContext): 
    if message.from_user: 
        log.info("–ê–Ω–∫–µ—Ç–∞: %s –≤–≤—ë–ª –∏–º—è %s", message.from_user.id, message.text)
    await state.update_data(name=message.text)#—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–∏
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.')
    await message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')#–æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –≤–æ–ø—Ä–æ—Å–æ–º
    await state.set_state(Form.age)#—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 
    
@router.message(Form.age)
async def process_age(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
    
    if not message.from_user:
        return 
    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        age = int(message.text)
    except ValueError:
        log.warning("–ê–Ω–∫–µ—Ç–∞: %s –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç %s", message.from_user.id, message.text)
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    if not (0 < age < 130):#–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –≤–∑—Ä–∞—Å—Ç–∞
        await message.answer("–ü–æ—Ö–æ–∂–µ, –≤–æ–∑—Ä–∞—Å—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return

    log.info("–ê–Ω–∫–µ—Ç–∞: %s –≤–≤—ë–ª –≤–æ–∑—Ä–∞—Å—Ç %d", message.from_user.id, age)
    await state.update_data(age=age)

    # ‚ö†Ô∏è –í–ê–ñ–ù–û: –¥–∞—ë–º –ß–Å–¢–ö–£–Æ –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏. –û—Å—Ç–∞–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    await message.answer(PHONE_HINT)
    await state.set_state(Form.phone_number)#–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    
@router.message(Form.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    if not message.from_user:
        return

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, —Å–∫–æ–±–∫–∏
    raw = message.text.strip()
    digits = re.sub(r"[^\d+]", "", raw)

    # –≤–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ–ø—É—Å–∫–∞–µ–º + –≤ –Ω–∞—á–∞–ª–µ –∏ 10‚Äì15 —Ü–∏—Ñ—Ä
    valid = PHONE_RE.fullmatch(digits) is not None

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 -> –≤ +7
    ru_like = re.sub(r"[^\d]", "", raw)
    if ru_like.startswith("8") and len(ru_like) == 11:#–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä
        # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ +7##########
        digits = "+7" + ru_like[1:]
        valid = True #—Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
    

    if not valid or len(raw) > 14:#–µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π
        log.warning("–ê–Ω–∫–µ—Ç–∞: %s –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ %s", message.from_user.id, raw)
        await message.answer(
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79991234567 –∏–ª–∏ 89991234567\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    log.info("–ê–Ω–∫–µ—Ç–∞: %s –≤–≤—ë–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ %s", message.from_user.id, digits)
    await state.update_data(phone_number=digits)#–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ 

    await message.answer(EMAIL_HINT)
    await state.set_state(Form.email)


@router.message(Form.email)
async def process_email(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ email:")
        return

    email = message.text.strip()#–≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç
    if not EMAIL_RE.fullmatch(email):#–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ—á—Ç—É
        await message.answer("–ü–æ—Ö–æ–∂–µ, email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ name@example.com:")
        return

    await state.update_data(email=email)#–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ 
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    await state.set_state(Form.comment)
    
@router.message(Form.comment)
async def process_comment(message: types.Message, state: FSMContext):
    
    if not message.text:
        return
    #–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞ –Ω–µ —Ä–∞–≤–µ–Ω '–Ω–µ—Ç'
    await state.update_data(comment=message.text if message.text.lower() != '–Ω–µ—Ç' else None)
    
    data = await state.get_data()#–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π 
    tg_user_id = message.from_user.id if message.from_user else None

    log.info("–ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: tg_id=%s –¥–∞–Ω–Ω—ã–µ=%s", tg_user_id, data)#–ª–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã

    try:
        async with engine.begin() as conn:#–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
            await conn.execute(#–∏—Å–ø–æ–ª–Ω—è–µ–º
                form.insert().values(#–≤—Å—Ç–∞–≤–∫–∞ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    tg_id=tg_user_id,
                    direction=data.get("direction"),
                    name=data.get("name"),
                    age=data.get("age"),
                    phone_number=data.get("phone_number"),
                    email=data.get("email"),
                    comment=data.get('comment'),
                )
            )
        log.info("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: tg_id=%s", tg_user_id)
        await message.answer(#—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            "‚úÖ –°–ø–∞—Å–∏–±–æ, –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            "üìã –í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get('direction')}\n"
            f"üë§ –ò–º—è: {data.get('name')}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_number')}\n"
            f"üìß Email: {data.get('email')}\n\n"
            "–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º!"
        )
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=main_menu)
    except Exception:#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        log.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã tg_id=%s", tg_user_id)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()#–æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µx
