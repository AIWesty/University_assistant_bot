from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram import types
from app.config import config
from app.logger import get_logger
from app.states.admin import AdminReply, AdminFaq
from app.keyboards.admins_kb import admin_main_kb, form_actions_kb, feedback_actions_kb, faq_admin_kb

from app.database import engine, form, feedback, faq, admin_messages  # —Ç–∞–±–ª–∏—Ü—ã
from sqlalchemy import select, update, delete, insert
from app.keyboards.faq_keyboard import build_keyboard_faq
from app.services.faq_service import add_faq, get_all_questions

router = Router()
log = get_logger(__name__)
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    return user_id in config.admin_ids

# —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ /admin
@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    user = message.from_user
    if not user or not is_admin(user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_main_kb())#–ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤—É –∞–¥–º–∏–Ω–∞ —Å callback –¥–∞—Ç–æ–π

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.callback_query(F.data == "admin_apps")#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è  "–∑–∞—è–≤–∫–∏" –ø—Ä–∏ –ø–æ–ø–æ—â–∏ callback
async def admin_list_apps(callback: CallbackQuery):
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if not callback.message:
        return

    # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫
    async with engine.connect() as conn:
        result = await conn.execute(
            select(form.c.id, form.c.name, form.c.direction, form.c.phone_number, form.c.created_at)
            .order_by(form.c.created_at.desc())
            .limit(10)
        )
        rows = result.mappings().all()# –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç SQL-–∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

    if not rows:#–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏
    for row in rows:
        app_id = row["id"]#–∞–π–¥–∏—à–Ω–∏–∫ –∑–∞—è–≤–∫–∏
        text = (
            f"#{app_id} ‚Ä¢ {row['name']}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {row['direction']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {row['phone_number']}\n"
            f"–î–∞—Ç–∞: {row['created_at']:%Y-%m-%d %H:%M}\n"
        )
        await callback.message.answer(text, reply_markup=form_actions_kb(app_id))#–æ—Ç–¥–∞–µ–º –≤ –æ—Ç–≤–µ—Ç–µ —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤—É –¥–µ–π—Å—Ç–≤–∏–π

    await callback.answer()#–ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–µ

# –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ (–º–æ–∂–Ω–æ –ø–æ callback —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å view, –Ω–æ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å–ø–∏—Å–∫–µ)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Reply -> –æ—Ç–≤–µ—Ç–∏—Ç—å; –º—ã –Ω–∞—á–∏–Ω–∞–µ–º FSM AdminReply –∏ –∑–∞–ø–æ–º–Ω–∏–º application_id –∏ user_tg_id
@router.callback_query(F.data.startswith("app_reply:"))
async def admin_app_reply(callback: CallbackQuery, state: FSMContext):
    admin_id = callback.from_user.id
    if not is_admin(admin_id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if not callback.data:
        return
    if not callback.message:
        return
    
    app_id = int(callback.data.split(":")[1])

    # –≤—ã—Ç–∞—â–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ user_id/tg_id
    async with engine.connect() as conn:
        #–¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä–∫—É –∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ –∞–π–¥–∏ –µ–≥–æ –∑–∞—è–≤–∫–∏
        result = await conn.execute(select(form.c.user_id).where(form.c.id == app_id))
        row = result.fetchone()
    #–µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–ª–∏
    if not row:
        await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return 
    
    user_tg_id = row[0]  # –∑–¥–µ—Å—å –≤ form –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ user_id –∫–∞–∫ telegram id (—Å–º–æ—Ç—Ä–∏ –º–æ–¥–µ–ª—å)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (form id, user id)
    await state.update_data(reply_to_app=app_id, reply_to_user=user_tg_id)
    await state.set_state(AdminReply.to_user)

    await callback.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (tg_id={user_tg_id}). –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞.")
    await callback.answer()

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.message(AdminReply.to_user)
async def admin_send_reply(message: types.Message, state: FSMContext, bot: Bot):
    admin = message.from_user
    if not admin or not is_admin(admin.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return
    

    data = await state.get_data()#–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
    app_id = data.get("reply_to_app")#–ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –∑–∞—è–≤–∫–∏
    user_tg_id = data.get("reply_to_user")#–∞–π–¥–∏ —é–∑–µ—Ä–∞ 
    text = message.text or ""#—Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å

    try:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_tg_id:
            await bot.send_message(user_tg_id, f"üì£ –û—Ç–≤–µ—Ç –æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏:\n\n{text}")
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –ª–æ–≥ admin_messages 
        async with engine.begin() as conn:
            await conn.execute(
                insert(admin_messages).values(
                    admin_id=admin.id, user_tg_id=user_tg_id, application_id=app_id, message=text
                )
            )

        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        log.info("Admin %s –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (app %s)", admin.id, user_tg_id, app_id)
    except Exception as e:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_tg_id, e)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π tg_id.")

    await state.clear()

# –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π
@router.callback_query(F.data.startswith("app_done:"))
async def admin_mark_done(callback: CallbackQuery):
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if not callback.data:
        return
    if not callback.message:
        return

    #–ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –∑–∞—è–≤–∫–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏
    app_id = int(callback.data.split(":")[1])
    async with engine.begin() as conn:
        result = await conn.execute(#–¥–µ–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ(–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)
            update(form).where(form.c.id == app_id).values(status="done").returning(form.c.id)
        )
        updated = result.scalar_one_or_none()#–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏–±–æ –æ–±–Ω–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–±–æ –Ω–∏—á–µ–≥–æ

    if updated:#–µ—Å–ª–∏ –¥–∞ 
        await callback.answer("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è ‚úÖ")#—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
        # await callback.message.edit_reply_markup(None)
        log.info("Admin %s –ø–æ–º–µ—Ç–∏–ª –∑–∞—è–≤–∫—É %s –∫–∞–∫ done", callback.from_user.id, app_id)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)

# –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É
@router.callback_query(F.data.startswith("app_del:"))
async def admin_delete_app(callback: CallbackQuery):
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if not callback.data: 
        return 
    #–≤—ã–±–∏—Ä–∞–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –∑–∞—è–≤–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    app_id = int(callback.data.split(":")[1])
    async with engine.begin() as conn:#–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ 
        #—É–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É
        result = await conn.execute(delete(form).where(form.c.id == app_id).returning(form.c.id))
        deleted = result.scalar_one_or_none()#–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ 

    if deleted:#–µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–æ—Å—å
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ üóë")
        # await callback.message.edit_reply_markup(None)
        log.info("Admin %s —É–¥–∞–ª–∏–ª –∑–∞—è–≤–∫—É %s", callback.from_user.id, app_id)#–ª–æ–≥–∏—Ä—É–µ–º
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É.", show_alert=True)

# --- Feedback: –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ
@router.callback_query(F.data == "admin_feedback")
async def admin_list_feedback(callback: CallbackQuery):
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if not callback.message:
        return
    
    #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    async with engine.connect() as conn:
        #–¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä–∫—É –æ—Ç–∑—ã–≤–æ–≤ 
        result = await conn.execute(select(feedback.c.id, feedback.c.message, feedback.c.created_at).order_by(feedback.c.created_at.desc()).limit(10))
        rows = result.mappings().all()#–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏

    #–µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤
    if not rows:
        await callback.message.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        await callback.answer()
        return

    for row in rows:
        #—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = f"#{row['id']} ‚Ä¢ {row['created_at']:%Y-%m-%d %H:%M}\n{row['message']}"
        #–æ—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º —Å –∫–ª–∞–≤–æ–π
        await callback.message.answer(text, reply_markup=feedback_actions_kb(row['id']))

    await callback.answer()

#—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
@router.callback_query(F.data.startswith("fb_del:"))
async def admin_delete_feedback(callback: CallbackQuery):
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if not callback.data: 
        return

    fid = int(callback.data.split(":")[1])
    async with engine.begin() as conn:#–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ 
        #—É–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤ –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É
        result = await conn.execute(delete(feedback).where(feedback.c.id == fid).returning(feedback.c.id))
        deleted = result.scalar_one_or_none()#–≤–æ—â–≤—Ä–∞—â–∞–µ–º –µ–≥–æ 

    if deleted:#–µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ 
        await callback.answer("–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω üóë")
        # await callback.message.edit_reply_markup(None)
        log.info("Admin %s —É–¥–∞–ª–∏–ª feedback %s", callback.from_user.id, fid)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤.", show_alert=True)

# –ê–¥–º–∏–Ω –∑–∞—Ö–æ–¥–∏—Ç –≤ –º–µ–Ω—é FAQ
@router.callback_query(F.data == "admin_faq")
async def admin_faq_menu(callback: CallbackQuery):
    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    if not callback.message:
        return
    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ:", reply_markup=faq_admin_kb())
    await callback.answer()

#–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö FAQ
#–∑–¥–µ—Å—å –º—ã —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø, —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∞–¥–º–∏–Ω
@router.callback_query(F.data == 'admin_faq_list')
async def show_all_faq_admin(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if not callback.message:
        return  
    
    #–≤—ã–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤-–≤–æ–ø—Ä–æ—Å–æ–≤
    faq_list = await get_all_questions()
    if not faq_list:
        await callback.message.answer("‚ùì –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç FAQ.")
        return
    #–¥–µ–ª–∞–µ–º –∫–ª–∞–≤—É
    kb = build_keyboard_faq(faq_list)
    await callback.message.answer("üìñ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã:", reply_markup=kb)#–≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.answer()



#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ faq
@router.callback_query(F.data == "admin_faq_add")#—Å–º–æ—Ç—Ä–∏–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π callback –¥–∞—Ç–µ
async def admin_faq_add_start(callback: CallbackQuery, state: FSMContext):
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    if not callback.message:
        return 
    #–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
    await state.update_data(start_message_id=callback.message.message_id)
    await state.set_state(AdminFaq.adding_question)#–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    await callback.answer()
    
#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(AdminFaq.adding_question)
async def admin_faq_add_question(message: types.Message, state: FSMContext):
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return
    #–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–æ–ø—Ä–æ—Å
    await state.update_data(new_question=message.text)
    await state.set_state(AdminFaq.adding_answer)#–ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")

#–¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
@router.message(AdminFaq.adding_answer)
async def admin_faq_add_answer(message: types.Message, state: FSMContext):
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await state.clear()
        return
    #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    data = await state.get_data()
    q = data.get("new_question")#–≤–æ–ø—Ä–æ—Å –±–µ—Ä–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö 
    a = message.text# –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–∏—à–µ–¥—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not q or not a: 
        return
    # –ó–∞–ø–∏—à–µ–º –≤ –ë–î, –Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥—É–±–ª—å
    await add_faq(q, a)#–∑–∞–ø–∏—à–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ FAQ.")
    log.info("Admin %s –¥–æ–±–∞–≤–∏–ª FAQ: %s", message.from_user.id, q)
    await state.clear()